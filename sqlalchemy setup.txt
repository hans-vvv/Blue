####  app.py ######################################################################

from contextlib import contextmanager
from flask_scripts.models import Session

from sqlalchemy import event
from sqlalchemy.engine import Engine
from sqlite3 import Connection as SQLite3Connection
from sqlalchemy.exc import IntegrityError


app = Flask(__name__)
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config.from_object('_flask_config')


@event.listens_for(Engine, "connect")
def _set_sqlite_pragma(dbapi_connection, connection_record):
    if isinstance(dbapi_connection, SQLite3Connection):
        cursor = dbapi_connection.cursor()
        cursor.execute("PRAGMA foreign_keys=ON;")
        cursor.close()



@contextmanager
def session_scope():
    """Provide a transactional scope around a series of dB operations."""
    s = Session()
    frm = inspect.stack()[2].filename
    try:
        yield s
        s.commit()
    except Exception as e:
        app.logger.error(frm)
        app.logger.error(e, exc_info=True)
        s.rollback()
        raise
    finally:
        s.close()


In route vieuws:
with session_scope() as s:
    user = s.query(User).filter_by(name=request.form['username']).first()


####  models.py ########################################################################


from sqlalchemy import Column, Integer, String, ForeignKey, Table, create_engine
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.ext.declarative import declarative_base

engine = create_engine("sqlite:///lcm.db")
Session = sessionmaker(bind=engine)

Base = declarative_base()

users_userroles = Table(
    'users_userroles', Base.metadata,
    Column('user_id', ForeignKey('users.id'), primary_key=True, index=True),
    Column('userrole_id', ForeignKey('userroles.id'), primary_key=True, index=True),
)



